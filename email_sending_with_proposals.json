{
  "name": "Email Sending Workflow with Proposal Attachments",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "startTime": "09:00",
              "interval": 3
            }
          ]
        }
      },
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:8000/api/v1/auth/token",
        "authentication": "genericCredentialType",
        "genericCredentialType": "lead-generator-api",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "username",
              "value": "={{ $credentials.username }}"
            },
            {
              "name": "password",
              "value": "={{ $credentials.password }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Get API Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        500,
        300
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "1",
          "name": "Lead Generator API"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Extract the token from the response\nconst token = $input.item.json.access_token;\nreturn { token };"
      },
      "name": "Extract Token",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        750,
        300
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "http://localhost:8000/api/v1/emails/pending?limit=20",
        "authentication": "genericCredentialType",
        "genericCredentialType": "lead-generator-api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $node[\"Extract Token\"].json[\"token\"] }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Get Pending Emails",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1000,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.count }}",
              "operation": "larger",
              "value2": 0
            }
          ]
        }
      },
      "name": "Has Pending Emails?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1250,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Extract the array of emails\nconst emails = $input.item.json.emails;\nreturn { emails };"
      },
      "name": "Extract Emails",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1500,
        200
      ]
    },
    {
      "parameters": {
        "path": "/proposals",
        "options": {
          "recursive": false
        }
      },
      "name": "List Proposal PDFs",
      "type": "n8n-nodes-base.filesLister",
      "typeVersion": 1,
      "position": [
        1500,
        400
      ]
    },
    {
      "parameters": {
        "functionCode": "// Get the emails and proposal files\nconst emails = $node[\"Extract Emails\"].json.emails;\nconst proposalFiles = $node[\"List Proposal PDFs\"].json;\n\n// Organize proposal files by type and variant\nconst proposalsByType = {};\n\n// Package types and their keywords\nconst PACKAGE_TYPES = {\n  \"seminar\": {\n    \"keywords\": [\n      \"retreat\", \"workshop\", \"seminar\", \"offsite\", \"residential\",\n      \"overnight\", \"accommodation\", \"stay\", \"corporate retreat\",\n      \"team building\"\n    ]\n  },\n  \"meeting\": {\n    \"keywords\": [\n      \"meeting\", \"conference\", \"day event\", \"business meeting\",\n      \"boardroom\", \"day seminar\", \"presentation\", \"training session\",\n      \"client meeting\", \"executive\"\n    ]\n  },\n  \"camping\": {\n    \"keywords\": [\n      \"camping\", \"outdoor\", \"adventure\", \"team building\", \"nature\",\n      \"retreat\", \"field trip\", \"expedition\", \"outdoor activities\",\n      \"student camp\", \"youth program\"\n    ]\n  },\n  \"wedding\": {\n    \"keywords\": [\n      \"wedding\", \"celebration\", \"ceremony\", \"reception\", \"event\",\n      \"party\", \"banquet\", \"gala\", \"anniversary\", \"special occasion\",\n      \"formal dinner\", \"celebration\"\n    ]\n  }\n};\n\n// Mappings between email templates and the most appropriate package types\nconst TEMPLATE_TO_PACKAGE = {\n  \"default\": \"meeting\",          // Default business template -> Meeting package\n  \"government\": \"seminar\",       // Government agency template -> Seminar package\n  \"university\": \"camping\",       // University/academic template -> Camping package\n  \"retreat\": \"seminar\",          // Strategic retreat template -> Seminar package\n  \"cost\": \"meeting\",             // Cost optimization template -> Meeting package\n  \"exec_tone\": \"meeting\"         // Executive formal template -> Meeting package\n};\n\n// Organization types and their keywords\nconst ORGANIZATION_TYPES = {\n  \"corporate\": [\n    \"sdn bhd\", \"berhad\", \"limited\", \"llc\", \"inc\", \"corporation\", \"corp\", \n    \"pte ltd\", \"private limited\", \"enterprise\", \"company\", \"consulting\",\n    \"agency\", \"firm\", \"partners\", \"associates\", \"group\"\n  ],\n  \"government\": [\n    \"ministry\", \"department\", \"jabatan\", \"kementerian\", \"gov\", \"govt\",\n    \"pejabat\", \"suruhanjaya\", \"council\", \"authority\", \"board\", \"commission\",\n    \"public sector\", \"majlis\", \"agensi\", \"negeri\", \"federal\", \"pusat\"\n  ],\n  \"university\": [\n    \"university\", \"universiti\", \"college\", \"kolej\", \"institute\", \"institut\",\n    \"campus\", \"faculty\", \"school of\", \"academic\", \"education\", \"higher education\",\n    \"graduate school\", \"polytechnic\", \"research center\"\n  ],\n  \"school\": [\n    \"school\", \"sekolah\", \"academy\", \"akademi\", \"primary school\", \"secondary school\",\n    \"high school\", \"middle school\", \"elementary\", \"kindergarten\", \"tadika\", \n    \"preschool\", \"education center\"\n  ]\n};\n\n// Process proposal files\nproposalFiles.forEach(file => {\n  const filename = file.name.toLowerCase();\n  \n  // Check for seminar packages\n  if (filename === \"seminar corp package.pdf\") {\n    if (!proposalsByType['seminar']) proposalsByType['seminar'] = {};\n    proposalsByType['seminar']['corporate'] = file.path;\n  }\n  else if (filename === \"seminar gov package.pdf\") {\n    if (!proposalsByType['seminar']) proposalsByType['seminar']['government'] = file.path;\n  }\n  // Check for meeting packages\n  else if (filename === \"meeting corp package.pdf\") {\n    if (!proposalsByType['meeting']) proposalsByType['meeting'] = {};\n    proposalsByType['meeting']['corporate'] = file.path;\n  }\n  else if (filename === \"meeting gov package.pdf\") {\n    if (!proposalsByType['meeting']) proposalsByType['meeting']['government'] = file.path;\n  }\n  // Check for camping package\n  else if (filename === \"camping package.pdf\") {\n    if (!proposalsByType['camping']) proposalsByType['camping'] = {};\n    proposalsByType['camping']['default'] = file.path;\n  }\n  // Check for wedding package\n  else if (filename === \"wedding package.pdf\") {\n    if (!proposalsByType['wedding']) proposalsByType['wedding'] = {};\n    proposalsByType['wedding']['default'] = file.path;\n  }\n});\n\n// Determine organization type from lead data\nfunction determineOrganizationType(lead) {\n  const org = (lead.lead_organization || \"\").toLowerCase();\n  const source = (lead.source_url || \"\").toLowerCase();\n  const text = `${org} ${source}`;\n  \n  // Check each type in priority order\n  for (const orgType in ORGANIZATION_TYPES) {\n    for (const keyword of ORGANIZATION_TYPES[orgType]) {\n      if (text.includes(keyword.toLowerCase())) {\n        return orgType;\n      }\n    }\n  }\n  \n  // Default to corporate if no clear match\n  return \"corporate\";\n}\n\n// Determine best package type for a lead\nfunction determinePackageType(lead, templateName) {\n  // If template is provided, use the mapping\n  if (templateName && TEMPLATE_TO_PACKAGE[templateName]) {\n    return TEMPLATE_TO_PACKAGE[templateName];\n  }\n  \n  // Otherwise analyze the lead text\n  const org = (lead.lead_organization || \"\").toLowerCase();\n  const role = (lead.lead_role || \"\").toLowerCase();\n  const name = (lead.lead_name || \"\").toLowerCase();\n  const source = (lead.source_url || \"\").toLowerCase();\n  const text = `${org} ${role} ${name} ${source}`;\n  \n  // Count keyword matches for each package type\n  const matchScores = {};\n  for (const pkgType in PACKAGE_TYPES) {\n    matchScores[pkgType] = 0;\n    for (const keyword of PACKAGE_TYPES[pkgType].keywords) {\n      if (text.includes(keyword.toLowerCase())) {\n        matchScores[pkgType]++;\n      }\n    }\n  }\n  \n  // Find the package with the highest match score\n  let bestMatch = null;\n  let highestScore = -1;\n  \n  for (const pkgType in matchScores) {\n    if (matchScores[pkgType] > highestScore) {\n      highestScore = matchScores[pkgType];\n      bestMatch = pkgType;\n    }\n  }\n  \n  // If no matches at all, use meeting as default\n  if (highestScore === 0) {\n    return \"meeting\";\n  }\n  \n  return bestMatch;\n}\n\n// Get appropriate proposal path for a lead\nfunction getProposalPath(lead) {\n  const orgType = determineOrganizationType(lead);\n  const templateName = lead.template_used || \"default\";\n  const pkgType = determinePackageType(lead, templateName);\n  \n  // Check if we have this package type available\n  if (!proposalsByType[pkgType]) {\n    // Fall back to the first available package type\n    const firstAvailableType = Object.keys(proposalsByType)[0];\n    if (!firstAvailableType) return null; // No proposals available\n    \n    // Try to get the appropriate variant for this org type\n    if (proposalsByType[firstAvailableType][orgType]) {\n      return proposalsByType[firstAvailableType][orgType];\n    }\n    // Fall back to default variant\n    return proposalsByType[firstAvailableType].default || \n           proposalsByType[firstAvailableType][Object.keys(proposalsByType[firstAvailableType])[0]];\n  }\n  \n  // Try to get the appropriate variant for this org type\n  if (proposalsByType[pkgType][orgType]) {\n    return proposalsByType[pkgType][orgType];\n  }\n  \n  // Fall back to default variant or any available variant for this package type\n  return proposalsByType[pkgType].default || \n         proposalsByType[pkgType][Object.keys(proposalsByType[pkgType])[0]];\n}\n\n// Match proposals to emails based on lead characteristics\nconst enrichedEmails = emails.map(email => {\n  // Get the appropriate proposal for this lead\n  const proposalPath = getProposalPath(email);\n  \n  // Add the proposal file path and selection metadata to the email object\n  return {\n    ...email,\n    proposalPath: proposalPath,\n    selectedPackageType: determinePackageType(email, email.template_used),\n    selectedOrgType: determineOrganizationType(email),\n    templateUsed: email.template_used || \"default\"\n  };\n});\n\nreturn { enrichedEmails };"
      },
      "name": "Match Proposals to Leads",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1750,
        300
      ]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "name": "Process Emails",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2.1,
      "position": [
        2000,
        300
      ]
    },
    {
      "parameters": {
        "amount": 5,
        "unit": "seconds"
      },
      "name": "Rate Limit",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        2250,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://localhost:8000/api/v1/emails/send-with-attachment",
        "authentication": "genericCredentialType",
        "genericCredentialType": "lead-generator-api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $node[\"Extract Token\"].json[\"token\"] }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "generation_id",
              "value": "={{ $json.generation_id }}"
            },
            {
              "name": "proposal_path",
              "value": "={{ $json.proposalPath }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Send Email with Proposal",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2500,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.status }}",
              "operation": "equals",
              "value2": "success"
            }
          ]
        }
      },
      "name": "Email Sent?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2750,
        300
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "sheetName": "Sent Emails With Proposals",
        "options": {
          "skipEmptyCells": true
        }
      },
      "name": "Record Success",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        3000,
        200
      ],
      "executeOnce": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "2",
          "name": "Google Sheets Account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "sheetName": "Failed Emails",
        "options": {
          "skipEmptyCells": true
        }
      },
      "name": "Record Failure",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        3000,
        400
      ],
      "executeOnce": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "2",
          "name": "Google Sheets Account"
        }
      }
    },
    {
      "parameters": {
        "channel": "C01234567890",
        "text": "=🚀 Successfully sent email with proposal to {{ $json.lead_email }} ({{ $json.lead_name }}) at {{ $json.lead_organization }}",
        "otherOptions": {}
      },
      "name": "Success Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2,
      "position": [
        3250,
        200
      ],
      "credentials": {
        "slackApi": {
          "id": "3",
          "name": "Slack Account"
        }
      }
    },
    {
      "parameters": {
        "channel": "C01234567890",
        "text": "=⚠️ Failed to send email with proposal to {{ $json.lead_email }} ({{ $json.lead_name }}) at {{ $json.lead_organization }}. Error: {{ $json.error }}",
        "otherOptions": {}
      },
      "name": "Failure Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2,
      "position": [
        3250,
        400
      ],
      "credentials": {
        "slackApi": {
          "id": "3",
          "name": "Slack Account"
        }
      }
    },
    {
      "parameters": {
        "method": "GET",
        "url": "http://localhost:8000/api/v1/stats/email-campaign",
        "authentication": "genericCredentialType",
        "genericCredentialType": "lead-generator-api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $node[\"Extract Token\"].json[\"token\"] }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Get Campaign Stats",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        3000,
        600
      ]
    },
    {
      "parameters": {
        "to": "team@example.com",
        "subject": "Email Campaign Report with Proposal Attachments",
        "text": "=## Email Campaign Report\n\nTotal emails sent today: {{ $node[\"Get Campaign Stats\"].json.sent_today }}\nTotal emails with proposals: {{ $node[\"Get Campaign Stats\"].json.sent_with_attachments }}\nOpen rate: {{ $node[\"Get Campaign Stats\"].json.open_rate }}%\nResponse rate: {{ $node[\"Get Campaign Stats\"].json.response_rate }}%\n\nTop performing proposal: {{ $node[\"Get Campaign Stats\"].json.top_proposal }}\n\nSee dashboard for more details.\n",
        "options": {
          "priority": "normal"
        }
      },
      "name": "Send Report Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [
        3250,
        600
      ],
      "credentials": {
        "smtp": {
          "id": "4",
          "name": "SMTP Account"
        }
      }
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get API Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get API Token": {
      "main": [
        [
          {
            "node": "Extract Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Token": {
      "main": [
        [
          {
            "node": "Get Pending Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Pending Emails": {
      "main": [
        [
          {
            "node": "Has Pending Emails?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Pending Emails?": {
      "main": [
        [
          {
            "node": "Extract Emails",
            "type": "main",
            "index": 0
          },
          {
            "node": "List Proposal PDFs",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Campaign Stats",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Emails": {
      "main": [
        [
          {
            "node": "Match Proposals to Leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Proposal PDFs": {
      "main": [
        [
          {
            "node": "Match Proposals to Leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Match Proposals to Leads": {
      "main": [
        [
          {
            "node": "Process Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Emails": {
      "main": [
        [
          {
            "node": "Rate Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rate Limit": {
      "main": [
        [
          {
            "node": "Send Email with Proposal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email with Proposal": {
      "main": [
        [
          {
            "node": "Email Sent?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email Sent?": {
      "main": [
        [
          {
            "node": "Record Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Record Failure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Record Success": {
      "main": [
        [
          {
            "node": "Success Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Record Failure": {
      "main": [
        [
          {
            "node": "Failure Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Campaign Stats": {
      "main": [
        [
          {
            "node": "Send Report Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {},
  "staticData": null,
  "tags": [
    {
      "id": 1,
      "name": "Lead Generator",
      "color": "#00ff00"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2023-04-18T15:15:00.000Z",
  "versionId": "1"
} 